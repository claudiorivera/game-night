datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  eventsAttending Event[]   @relation("EventGuests")
  eventsHosting   Event[]
  isAdmin         Boolean   @default(false)
}

model Event {
  id       String   @id @default(cuid())
  dateTime DateTime
  host     User     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId   String
  guests   User[]   @relation("EventGuests")
  game     Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId   String
}

model Game {
  id            String   @id @default(cuid())
  name          String
  imageSrc      String
  thumbnailSrc  String
  description   String
  authors       String[]
  categories    String[]
  mechanics     String[]
  bggId         Int      @unique
  yearPublished Int
  minPlayers    Int
  maxPlayers    Int
  playingTime   Int
  minAge        Int
  rating        Float
  numOfRatings  Int
  events        Event[]
}
